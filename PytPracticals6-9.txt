6 FILE HANDLING

6aReading from a file
print("Moosa Ansari | 210")
#Here, the file "Hello.txt" is pre-built and stored in the same folder as this program.

# Open the file "Hello.txt" in read mode ('r')
f = open("Hello.txt", 'r')

# Print the name of the file
print("File Name: ", f.name)

# Print the mode in which the file is opened
print("File mode: ", f.mode)

# Check if the file is readable
print("Is File Readable? ", f.readable())

# Check if the file is currently closed
print("Is File Closed? ", f.closed)

# Read the contents of the file
data = f.read()

# Print the contents of the file
print(data)

# Close the file
f.close()

# Check again if the file is closed
print("Is File Closed? : ", f.closed)




6b Writing to a file
# Program to write data to a file

print("Moosa Ansari | 210")
# Open a file named "HelloWorld.txt" in write mode ('w')
# If the file doesn't exist, it will be created
f = open("HelloWorld.txt", 'w')

# Write three lines of text to the file
f.write("This is File Handling Program.\n")
f.write("I am writing data\n")
f.write("to a file.\n")

# Print a success message to the console
print("Data written Successfully")

# Close the file to release system resources
f.close()




7 REGULAR EXPRESSIONS

7aMatch
print("Moosa Ansari | 210")
import re

line="Cats are smarter than Dogs"

matchObj=re.match( r'(.*) are (.*?) .*',line,re.M|re.I)

if matchObj:
    print( "matchObj.group() :", matchObj.group())
    print("matchObj.group(1) :", matchObj.group(1))
    print("matchObj.group(2) :", matchObj.group(2))
else:
    print("No match!!")




7bSearch
print("Moosa Ansari | 210")
import re

#Check if the string starts with "The" and ends with "Spain":

txt = "The rain in Spain"
x = re.search("^The.*Spain$", txt)

if x:
  print("YES! We have a match!")
else:
  print("No match")




7cSearch and Replace
print("Moosa Ansari | 210")
import re

#Replace all white-space characters with the digit "9":

txt = "The rain in Spain"
x = re.sub("\s", "9", txt)
print(x)




7dFindAll
print("Moosa Ansari | 210")
import re

#Return a list containing every occurrence of "ai":

txt = "The rain in Spain"
x = re.findall("ai", txt)
print(x)




7eSplit
print("Moosa Ansari | 210")
import re

#Split the string at every white-space character:

txt = "The rain in Spain"
x = re.split("\s", txt)
print(x)





8A CLASSES AND OBJECTS

8A1print("Moosa Ansari | 210")
class Employee:
    'commom base class for all employees'
    empCount=0

    def __init__(self,name,salary):
        self.name = name
        self.salary = salary
        Employee.empCount += 1

    def displayCount(self):
                     print ("Total Employee ",Employee.empCount)

    def displayEmployee(self):
        print("Name : ", self.name,"Salary:",self.salary)

emp1=Employee("Zara",2000)
emp2=Employee("Manni",5000)
emp1.displayEmployee()
emp2.displayEmployee()
print ("Total Employee", Employee.empCount)




8A2Built-in Functions
print("Moosa Ansari | 210")
class Point:
    def __init__(self,x=0,y=0):
        self.x=x
        self.y=y
    def __del__(self):
        class_name = self.__class__.__name__
        print (class_name,"destroyed")

pt1=Point()
pt2=pt1
pt3=pt1
print (id(pt1),id(pt2),id(pt3))
del pt1
del pt2
del pt3




8A3MethodOverloading
print("Moosa Ansari | 210")
class Vector:
  def __init__(self, a, b):
     self.a = a
     self.b = b

  def __str__(self):
     return 'Vector (%d, %d)' % (self.a, self.b)
 
  def __add__(self,other):
     return Vector(self.a + other.a, self.b + other.b)

v1 = Vector(2,10)
v2 = Vector(5,-2)
print (v1 + v2)




8A4Inheritance and Method Overriding
print("Moosa Ansari | 210")
class Parent: # define parent class
   def myMethod(self):
      print("Calling parent method")

class Child(Parent): # define child class
   def myMethod(self):
      print("Calling child method")

c = Child() # instance of child
c.myMethod() # child calls overridden method





8B MODULES

8B1Calendar Mod
print("Moosa Ansari | 210")
# Import the 'calendar' module
import calendar

# Prompt the user to input the year and month
y = int(input("Input the year : "))
m = int(input("Input the month : "))

# Print the calendar for the specified year and month
print(calendar.month(y, m))




8B2Struct Mod
print("Moosa Ansari | 210")
# Import the 'struct' module, which provides pack and unpack functions for working with variable-length binary data.
import struct

# Use the 'calcsize' function to determine the size (in bytes) of the C int type for the current platform.
# The format string "P" is used to represent the C void pointer type, and multiplying it by 8 gives the size in bits.
# The result will be 32 for 32-bit platforms and 64 for 64-bit platforms.
print(struct.calcsize("P") * 8)




8B3 The "From...import..." statement
IN THIS PRACT, ADD PATH OF ANY DIRECTORY FROM YOUR PC (THAT DIRECTORY MUST CONTAIN FILES) INSIDE THE (' ') BRACKET
EXMPL: C:/Users/DELL/OneDrive/Desktop/Module Practicals/

print("Moosa Ansari | 210")
# Import necessary functions and modules from the 'os' library.
from os import listdir
from os.path import isfile, join

# Create a list 'files_list' that contains the names of files in the 'PATH' directory.
# It uses a list comprehension to filter files using 'isfile' and 'join' functions.
files_list = [f for f in listdir('PATH') if isfile(join('PATH', f))]

# Print the list of file names.
print(files_list)




9 GUI PROGRAMS

9aPythonCanvas
print("Moosa Ansari | 210 \nPython Canvas")
from tkinter import *
top = Tk()
top.geometry("200x200")
#creating a simple canvas
c = Canvas(top,bg = "pink",height = "200")
c.pack()
top.mainloop()




9bCreatingAnArc
print("Moosa Ansari | 210 \nCreating an Arc")
from tkinter import *
top = Tk()
top.geometry("200x200")
#creating a simple canvas
c = Canvas(top,bg = "pink",height = "200",width = 200)
arc = c.create_arc((5,10,150,200),start = 0,extent = 150, fill= "white")
c.pack()
top.mainloop()




9cCheckbox
print("Moosa Ansari | 210\nCheckBox")
from tkinter import *
top = Tk()
top.geometry("200x200")
checkvar1 = IntVar()
checkvar2 = IntVar()
checkvar3 = IntVar()
chkbtn1 = Checkbutton(top, text = "C", variable = checkvar1, onvalue = 1, offvalue = 0, height = 2, width = 10)
chkbtn2 = Checkbutton(top, text = "C+", variable = checkvar2, onvalue = 1, offvalue = 0, height = 2, width = 10)
chkbtn3 = Checkbutton(top, text = "Java", variable = checkvar3, onvalue = 1, offvalue = 0, height = 2, width = 10)
chkbtn1.pack()
chkbtn2.pack()
chkbtn3.pack()
top.mainloop()





9dEntry
print("Moosa Ansari | 210 \nEntry (Calculator)")
import tkinter as tk
from functools import partial

def call_result(label_result, n1, n2):
    num1 = n1.get()
    num2 = n2.get()
    result = int(num1) + int(num2)
    label_result.config(text="Result = %d" % result)
    return

root = tk.Tk()
root.geometry('400x200+100+200')
root.title('Calculator')

number1 = tk.StringVar()
number2 = tk.StringVar()

labelNum1 = tk.Label(root, text="A").grid(row=1, column=0)
labelNum2 = tk.Label(root, text="B").grid(row=2, column=0)
labelResult = tk.Label(root)
labelResult.grid(row=7, column=2)

entryNum1 = tk.Entry(root, textvariable=number1).grid(row=1, column=2)
entryNum2 = tk.Entry(root, textvariable=number2).grid(row=2, column=2)

call_result = partial(call_result, labelResult, number1, number2)
buttonCal = tk.Button(root, text="Calculate", command=call_result).grid(row=3, column=0)

root.mainloop()




9eListbox
print("Moosa Ansari | 210 \nListBox")
from tkinter import *

top = Tk()
top.geometry("200x250")

lbl = Label(top, text="A list of favourite countries...")
listbox = Listbox(top)
listbox.insert(1, "India")
listbox.insert(2, "USA")
listbox.insert(3, "Japan")
listbox.insert(4, "Australia")

# This button will delete the selected item from the list
btn = Button(top, text="Delete", command=lambda: listbox.delete(ANCHOR))

lbl.pack()
listbox.pack()
btn.pack()

top.mainloop()




9fMenuButton
print("Moosa Ansari | 210 \nMenuButton")
from tkinter import *

top = Tk()
top.geometry("200x250")

menubutton = Menubutton(top, text="Language", relief=FLAT)
menubutton.grid()

menubutton.menu = Menu(menubutton, tearoff=0)
menubutton["menu"] = menubutton.menu

# Add checkbuttons to the menu
menubutton.menu.add_checkbutton(label="Hindi", variable=IntVar())
menubutton.menu.add_checkbutton(label="English", variable=IntVar())

# Use grid or pack, but not both
menubutton.grid()

top.mainloop()




9gMenuBar
print("Moosa Ansari | 210 \nMenuBar")
from tkinter import Toplevel, Button, Tk, Menu

top = Tk()

menubar = Menu(top)

file = Menu(menubar, tearoff=0)
file.add_command(label="New")
file.add_command(label="Open")
file.add_command(label="Save")
file.add_command(label="Save as...")
file.add_command(label="Close")
file.add_separator()
file.add_command(label="Exit", command=top.quit)
menubar.add_cascade(label="File", menu=file)

edit = Menu(menubar, tearoff=0)
edit.add_command(label="Undo")
edit.add_separator()
edit.add_command(label="Cut")
edit.add_command(label="Copy")
edit.add_command(label="Paste")
edit.add_command(label="Delete")
edit.add_command(label="Select All")
menubar.add_cascade(label="Edit", menu=edit)

help = Menu(menubar, tearoff=0)
help.add_command(label="About")
menubar.add_cascade(label="Help", menu=help)

top.config(menu=menubar)

top.mainloop()






