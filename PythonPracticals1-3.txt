1.1BasicDetails
print("Name: Moosa Imran Ansari");
print("Roll No.: ");
print("Class: SYIT (Sem 3)");
print("Age: 19");



1.2ArithmeticOperators
print("Moosa Ansari |  | SYIT");
x=5
y=3
print("The Two Numbers Are:",x, "and",y)
print("Sum of Two Numbers:", x+y);
print("Difference of Two Numbers", x-y);
print("Product of Two Numbers:", x*y);
print("Quotient of Two Numbers:", x/y);



1.3SquareRoot
print("Moosa Ansari |  | SYIT");
import math

num=float(input("Enter a Number:"))
sqr_rt = math.sqrt(num)

print("The Square Root of", num, "is",sqr_rt);



1.4ReactTriArea
print("Moosa Ansari |  | SYIT");

def rectangle_area(length, width):
    return length*width
def triangle_area(base, height):
    return 0.5*base*height

length=float(input("Enter Rectangle Length: "));
width=float(input("Enter Rectangle Width: "));
print("Rectangle Area:",rectangle_area(length, width))

base=float(input("Enter Triangle Base: "));
height=float(input("Enter Triangle Height "));
print("Triangle Area:",triangle_area(base, height))



1.5EvenOrOdd
print("Moosa Ansari |  | SYIT");
num=int(input("Enter A Number: "));

if num%2==0:
    print(num, "is an EVEN Number");
else:
    print(num, "is an ODD Number");



2.1LeapYear
print("Moosa Ansari |  | SYIT");
year=int(input("Enter the Year: "));

if year%4==0 and (year%100!=0 or year%400==0):
    print("This is a LEAP Year");
else:
    print("This is NOT a LEAP Year");



2.2GreatestOf3
print("Moosa Ansari |  | SYIT");

print("Enter Three Numbers: ");
n1=int(input());
n2=int(input());
n3=int(input());

if n1<n2 or n1<n3:
    if n2<n3:
        print(n3, "Is the Greatest");
    else:
        print(n2, "Is the Greatest");
else:
    print(n1, "Is the Greatest");



2.3PrimeOrNot
print("Moosa Ansari |  | SYIT");
num=int(input("Enter a Number: "));

if num>1:
    for i in range(2, num):
        if num%i==0:
            print(num, "is NOT a PRIME number");
            break
        else:
             print(num, "is a PRIME number");
             break
else:
     print(num, "is NOT a PRIME number");



2.4KmMiles
print("Moosa Ansari | | SYIT")

km=int(input("Enter Kilometres: "));
miles=km*0.621
print(km, "Kilometres =", miles, "Miles");

mile=int(input("Now Enter Miles: "));
kilom=mile*1.609
print(mile, "Miles =", kilom, "Kilometres");



2.5MultiplicationTable
print("Moosa Ansari |  | SYIT");
num=int(input("Enter a Number to get its Multiplication Table: "));

print("The Multiplication Table of",num,"is:");
for count in range(1,11):
    print(num,"x",count,"=",num*count);



3.1Python program for List
print("Moosa Ansari | SYIT");
# Creating a list
my_list = [1, 2, 3, 4, 5]
print("Initial list:", my_list)

# Adding elements
my_list.append(6)
print("After appending 6:", my_list)

my_list.insert(2, 'a')
print("After inserting 'a' at index 2:", my_list)

my_list.extend([7, 8, 9])
print("After extending with [7, 8, 9]:", my_list)

# Removing elements
my_list.remove('a')
print("After removing 'a':", my_list)

removed_element = my_list.pop(2)
print("Element removed from index 2:", removed_element)
print("List after popping element at index 2:", my_list)

last_element = my_list.pop()
print("Last element removed:", last_element)
print("List after popping the last element:", my_list)

# Accessing elements
first_element = my_list[0]
print("First element:", first_element)

sub_list = my_list[1:4]
print("Sub-list from index 1 to 3:", sub_list)

# Other useful methods
index_of_4 = my_list.index(4)
print("Index of element 4:", index_of_4)

count_of_2 = my_list.count(2)
print("Count of element 2:", count_of_2)

my_list.reverse()
print("List after reversing:", my_list)

my_list.sort()
print("List after sorting:", my_list)

# List comprehensions
squares = [x**2 for x in range(10)]
print("List of squares from 0 to 9:", squares)

evens = [x for x in range(10) if x % 2 == 0]
print("List of even numbers from 0 to 9:", evens)

# Nested lists
nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print("Nested list:", nested_list)

element = nested_list[1][2]
print("Element at nested_list[1][2]:", element)

flattened_list = [item for sublist in nested_list for item in sublist]
print("Flattened list:", flattened_list)



3.2Program for Tuple
print("Moosa Ansari | SYIT");
# Creating tuples
my_tuple = (1, 2, 3, 4, 5)
print("Initial tuple:", my_tuple)

# Creating a tuple without parentheses
another_tuple = 6, 7, 8
print("Another tuple:", another_tuple)

# Creating a tuple with one element (comma is necessary)
single_element_tuple = (9,)
print("Single element tuple:", single_element_tuple)

# Creating an empty tuple
empty_tuple = ()
print("Empty tuple:", empty_tuple)

# Accessing elements
first_element = my_tuple[0]
print("First element:", first_element)

sub_tuple = my_tuple[1:4]
print("Sub-tuple from index 1 to 3:", sub_tuple)

# Tuple functions and methods
index_of_3 = my_tuple.index(3)
print("Index of element 3:", index_of_3)

count_of_2 = my_tuple.count(2)
print("Count of element 2:", count_of_2)

# Tuple concatenation
concatenated_tuple = my_tuple + another_tuple
print("Concatenated tuple:", concatenated_tuple)

# Tuple repetition
repeated_tuple = my_tuple * 2
print("Repeated tuple:", repeated_tuple)

# Unpacking tuples
a, b, c, d, e = my_tuple
print("Unpacked elements:", a, b, c, d, e)

# Nested tuples
nested_tuple = (1, (2, 3), (4, 5, 6))
print("Nested tuple:", nested_tuple)

# Accessing elements in nested tuples
nested_element = nested_tuple[1][1]
print("Element at nested_tuple[1][1]:", nested_element)

# Iterating through a tuple
print("Iterating through my_tuple:")
for element in my_tuple:
    print(element)

# Checking membership
is_in_tuple = 3 in my_tuple
print("Is 3 in my_tuple?", is_in_tuple)

# Getting the length of the tuple
length_of_tuple = len(my_tuple)
print("Length of my_tuple:", length_of_tuple)

# Converting a list to a tuple
my_list = [10, 11, 12]
converted_tuple = tuple(my_list)
print("Converted tuple from list:", converted_tuple)



3.3Dictionary in Python
print("Moosa Ansari | SYIT");
# Creating dictionaries
my_dict = {
    'name': 'Alice',
    'age': 25,
    'city': 'New York'
}
print("Initial dictionary:", my_dict)

# Creating an empty dictionary
empty_dict = {}
print("Empty dictionary:", empty_dict)

# Adding and updating elements
my_dict['email'] = 'alice@example.com'
print("After adding email:", my_dict)

my_dict['age'] = 26
print("After updating age:", my_dict)

# Accessing elements
name = my_dict['name']
print("Name:", name)

# Using the get method
age = my_dict.get('age')
print("Age using get method:", age)

# Trying to access a non-existent key using get
phone = my_dict.get('phone', 'Not Available')
print("Phone using get method with default value:", phone)

# Removing elements
removed_element = my_dict.pop('email')
print("Removed element:", removed_element)
print("After popping email:", my_dict)

# Removing the last inserted key-value pair
last_item = my_dict.popitem()
print("Last item removed:", last_item)
print("After popping the last item:", my_dict)

# Checking for key existence
has_city = 'city' in my_dict
print("Is 'city' a key in the dictionary?", has_city)

# Iterating through a dictionary
print("Keys in the dictionary:")
for key in my_dict.keys():
    print(key)

print("Values in the dictionary:")
for value in my_dict.values():
    print(value)

print("Key-value pairs in the dictionary:")
for key, value in my_dict.items():
    print(key, value)

# Copying a dictionary
my_dict_copy = my_dict.copy()
print("Copied dictionary:", my_dict_copy)

# Clearing a dictionary
my_dict_copy.clear()
print("After clearing the copied dictionary:", my_dict_copy)

# Nested dictionaries
nested_dict = {
    'person1': {'name': 'Alice', 'age': 25},
    'person2': {'name': 'Bob', 'age': 30}
}
print("Nested dictionary:", nested_dict)

# Accessing elements in nested dictionaries
person1_name = nested_dict['person1']['name']
print("Person1's name:", person1_name)

# Dictionary comprehensions
squares = {x: x**2 for x in range(5)}
print("Dictionary of squares:", squares)

# Merging dictionaries (Python 3.9+)
dict1 = {'a': 1, 'b': 2}
dict2 = {'b': 3, 'c': 4}
merged_dict = dict1 | dict2
print("Merged dictionary using | operator:", merged_dict)



3.4Convert the tuple to a list
print("Moosa Ansari | SYIT");
# Define a tuple
my_tuple = (1, 2, 3, 4, 5)

# Convert the tuple to a list
my_list = list(my_tuple)

# Print the original tuple and the resulting list
print("Original tuple:", my_tuple)
print("Converted list:", my_list)



3.5Convert dictionary items to a list of tuples
print("Moosa Ansari | SYIT");
#Define a dictionary
my_dict = {'a': 1, 'b': 2, 'c': 3}

# Convert dictionary items to a list of tuples
items_list = list(my_dict.items())

# Print the original dictionary and the resulting list
print("Original dictionary:", my_dict)
print("Converted list of tuples:", items_list)